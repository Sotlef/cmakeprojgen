# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

include (CMakeParseArguments)

if (WIN32)
    macro(get_WIN32_WINNT version)
        if (CMAKE_SYSTEM_VERSION)
            set(ver ${CMAKE_SYSTEM_VERSION})
            string(REGEX MATCH "^([0-9]+).([0-9])" ver ${ver})
            string(REGEX MATCH "^([0-9]+)" verMajor ${ver})
            # Check for Windows 10, b/c we'll need to convert to hex 'A'.
            if ("${verMajor}" MATCHES "10")
                set(verMajor "A")
                string(REGEX REPLACE "^([0-9]+)" ${verMajor} ver ${ver})
            endif ("${verMajor}" MATCHES "10")
            # Remove all remaining '.' characters.
            string(REPLACE "." "" ver ${ver})
            # Prepend each digit with a zero.
            string(REGEX REPLACE "([0-9A-Z])" "0\\1" ver ${ver})
            set(${version} "0x${ver}")
        endif(CMAKE_SYSTEM_VERSION)
    endmacro(get_WIN32_WINNT)

    get_WIN32_WINNT(ver)
    add_definitions(-D_WIN32_WINNT=${ver})
endif(WIN32)

macro (global)
	cmake_parse_arguments (__@CMAKEPROJGEN_PROJECTPREFIX@_GLOBAL_VARIABLES
		""
		""
		"TARGET;INSTALLATION;PACKAGE"
		${ARGN})
	
	if (__@CMAKEPROJGEN_PROJECTPREFIX@_GLOBAL_VARIABLES_TARGET)
		if (@CMAKEPROJGEN_PROJECTPREFIX@_GLOBAL_VARIABLES_TARGET)
			list (APPEND @CMAKEPROJGEN_PROJECTPREFIX@_GLOBAL_VARIABLES_TARGET ${__@CMAKEPROJGEN_PROJECTPREFIX@_GLOBAL_VARIABLES_TARGET})
		else ()
			set (@CMAKEPROJGEN_PROJECTPREFIX@_GLOBAL_VARIABLES_TARGET ${__@CMAKEPROJGEN_PROJECTPREFIX@_GLOBAL_VARIABLES_TARGET})
		endif ()
		set (__@CMAKEPROJGEN_PROJECTPREFIX@_GLOBAL_VARIABLES_TARGET)
	endif ()

	if (__@CMAKEPROJGEN_PROJECTPREFIX@_GLOBAL_VARIABLES_PACKAGE)
		if (@CMAKEPROJGEN_PROJECTPREFIX@_GLOBAL_VARIABLES_PACKAGE)
			list (APPEND @CMAKEPROJGEN_PROJECTPREFIX@_GLOBAL_VARIABLES_PACKAGE ${__@CMAKEPROJGEN_PROJECTPREFIX@_GLOBAL_VARIABLES_PACKAGE})
		else ()
			set (@CMAKEPROJGEN_PROJECTPREFIX@_GLOBAL_VARIABLES_PACKAGE ${__@CMAKEPROJGEN_PROJECTPREFIX@_GLOBAL_VARIABLES_PACKAGE})
		endif ()
		set (__@CMAKEPROJGEN_PROJECTPREFIX@_GLOBAL_VARIABLES_PACKAGE)
	endif ()

	if (__@CMAKEPROJGEN_PROJECTPREFIX@_GLOBAL_VARIABLES_INSTALLATION)
		if (@CMAKEPROJGEN_PROJECTPREFIX@_GLOBAL_VARIABLES_INSTALLATION)
			list (APPEND @CMAKEPROJGEN_PROJECTPREFIX@_GLOBAL_VARIABLES_INSTALLATION ${__@CMAKEPROJGEN_PROJECTPREFIX@_GLOBAL_VARIABLES_INSTALLATION})
		else ()
			set (@CMAKEPROJGEN_PROJECTPREFIX@_GLOBAL_VARIABLES_INSTALLATION ${__@CMAKEPROJGEN_PROJECTPREFIX@_GLOBAL_VARIABLES_INSTALLATION})
		endif ()
		set (__@CMAKEPROJGEN_PROJECTPREFIX@_GLOBAL_VARIABLES_INSTALLATION)
	endif ()
endmacro ()

macro (subdirectories)
	cmake_parse_arguments (__@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE
		"OVERRIDE"
		"SRCDIR"
		""
		${ARGN})
	
	set (__@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_SRCDIR_TEMP ${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_SRCDIR})
	if ((NOT __@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_OVERRIDE) AND __@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_SRCDIR)
		set (@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_SRCDIR ${__@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_SRCDIR})
	endif ()
		
	foreach (dir ${__@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_UNPARSED_ARGUMENTS})
		if (__@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_OVERRIDE AND __@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_SRCDIR)
			set (@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_SRCDIR ${__@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_SRCDIR}/${dir})
		endif ()
		add_subdirectory (${dir})
	endforeach ()
	
	if (NOT ${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_SOURCE_DIR})
		foreach (var ${@CMAKEPROJGEN_PROJECTPREFIX@_GLOBAL_VARIABLES_TARGET} ${@CMAKEPROJGEN_PROJECTPREFIX@_GLOBAL_VARIABLES_PACKAGE} ${@CMAKEPROJGEN_PROJECTPREFIX@_GLOBAL_VARIABLES_INSTALLATION})
			set (${var} ${${var}} PARENT_SCOPE)
		endforeach ()
	endif ()
	set (@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_SRCDIR ${__@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_SRCDIR_TEMP})
	
	set(__@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_SRCDIR)
	set(__@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_OVERRIDE)
	set(__@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_UNPARSED_ARGUMENTS)
endmacro ()

macro (import_external_project EXTERNAL_PROJECT_NAME)
	cmake_parse_arguments (__EXTERNAL_PROJECT
		"" "SRCDIR"	""
		${ARGN})
		
	string (MAKE_C_IDENTIFIER ${EXTERNAL_PROJECT_NAME} ${__EXTERNAL_PROJECT_C_IDENTIFIER})
	if (${__EXTERNAL_PROJECT_C_IDENTIFIER} STREQUAL ${EXTERNAL_PROJECT_NAME})
		string (TOUPPER ${__EXTERNAL_PROJECT_C_IDENTIFIER} __EXTERNAL_PROJECT_PREFIX)
		set (${__EXTERNAL_PROJECT_PREFIX}_PACKAGE_IMPORTED ON)
		set (${__EXTERNAL_PROJECT_PREFIX}_PACKAGE_CLIENTPREFIX @CMAKEPROJGEN_PROJECTPREFIX@)
		set (${__EXTERNAL_PROJECT_PREFIX}_PACKAGE_EXPORTING_TARGETS ${__EXTERNAL_PROJECT_TARGETS})
		set (${__EXTERNAL_PROJECT_PREFIX}_PACKAGE_OUTDIR ${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_OUTDIR})
		set (${__EXTERNAL_PROJECT_PREFIX}_PACKAGE_SRCDIR ${__EXTERNAL_PROJECT_SRCDIR})
	else ()
		message (FATAL_ERROR "Invalid external project name specified: ${EXTERNAL_PROJECT_NAME}")
	endif ()
	
	set (EXTERNAL_PROJECT_SRCDIR)
	set (__EXTERNAL_PROJECT_C_IDENTIFIER)
	set (__EXTERNAL_PROJECT_PREFIX)
endmacro ()

macro (configure_cpack_generators)
	set (@CMAKEPROJGEN_PROJECTPREFIX@_CPACK_GENERATOR "None" CACHE STRING 
		"Select CPack generator for installer")
	set_property (CACHE @CMAKEPROJGEN_PROJECTPREFIX@_CPACK_GENERATOR PROPERTY STRINGS
		"None" "NSIS Installer" "Zip Archive" "Tar GZip Archive" "Self extracting Tar GZip Archive" "Tar BZip2 Archive" "Tar Archive")
		
	if (@CMAKEPROJGEN_PROJECTPREFIX@_CPACK_GENERATOR STREQUAL "NSIS Installer")
		set (CPACK_GENERATOR NSIS)
	elseif (@CMAKEPROJGEN_PROJECTPREFIX@_CPACK_GENERATOR STREQUAL "Zip Archive")
		set (CPACK_GENERATOR ZIP)
	elseif (@CMAKEPROJGEN_PROJECTPREFIX@_CPACK_GENERATOR STREQUAL "Tar GZip Archive")
		set (CPACK_GENERATOR TGZ)
	elseif (@CMAKEPROJGEN_PROJECTPREFIX@_CPACK_GENERATOR STREQUAL "Tar BZip2 Archive")
		set (CPACK_GENERATOR TBZ2)
	elseif (@CMAKEPROJGEN_PROJECTPREFIX@_CPACK_GENERATOR STREQUAL "Self extracting Tar GZip Archive")
		set (CPACK_GENERATOR STGZ)
	elseif (@CMAKEPROJGEN_PROJECTPREFIX@_CPACK_GENERATOR STREQUAL "Tar Archive")
		set (CPACK_GENERATOR TZ)
	elseif (@CMAKEPROJGEN_PROJECTPREFIX@_CPACK_GENERATOR STREQUAL "None")
	else ()
		message (WARNING "Unknown CPack generator has been selected: ${@CMAKEPROJGEN_PROJECTPREFIX@_CPACK_GENERATOR}")
		message (WARNING "Select generator from the list")
	endif ()
endmacro ()

macro (__determine_target_filename__ @CMAKEPROJGEN_PROJECTPREFIX@_TARGET_TYPE)
	if (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_TYPE} STREQUAL "Executable")
		if (WIN32)
			set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILENAME ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME}.exe)
		else ()
			set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILENAME ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME})
		endif ()
	elseif (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_TYPE} STREQUAL "Shared Library")
		if (WIN32)
			set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILENAME ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME}.dll)
		else ()
			set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILENAME lib${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME}.so)
		endif ()
	elseif (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_TYPE} STREQUAL "Static Library")
		if (WIN32)
			set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILENAME ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME}.lib)
		else ()
			set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILENAME lib${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME}.a)
		endif ()
	elseif (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_TYPE} STREQUAL "C++ Component")
		if (WIN32)
			set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILENAME ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME}.dll)
		else ()
			set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILENAME lib${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME}.so)
		endif ()
	else ()
		message (FATAL_ERROR "Unknown type '${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_TYPE}' specified for target '${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME}'")
	endif ()
endmacro ()

macro (__determine_target_runtime__ @CMAKEPROJGEN_PROJECTPREFIX@_TARGET_TYPE)
	if (WIN32 AND NOT UNIX)
		if (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_TYPE} STREQUAL "Executable")
			set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_RUNTIME "Bin")
		elseif (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_TYPE} STREQUAL "Shared Library")
			set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_RUNTIME "Bin")
		elseif (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_TYPE} STREQUAL "C++ Component")
			set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_RUNTIME "Bin/Components")
		endif ()
	else ()
		if (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_TYPE} STREQUAL "Executable")
			set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_RUNTIME "bin")
		elseif (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_TYPE} STREQUAL "Shared Library")
			set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_LIBRARY "lib")
		elseif (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_TYPE} STREQUAL "C++ Component")
            set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_LIBRARY "lib/unicom-${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_VERSION_MAJOR}/services")
		endif ()
	endif ()
endmacro ()

macro (__determine_target_archive__ @CMAKEPROJGEN_PROJECTPREFIX@_TARGET_TYPE)
	if (WIN32 AND NOT UNIX)
		if (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_TYPE} STREQUAL "Shared Library")
			set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_ARCHIVE "SDK/Lib")
		elseif (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_TYPE} STREQUAL "Static Library")
			set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_ARCHIVE "SDK/Lib")
		endif ()
	else ()
		if (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_TYPE} STREQUAL "Static Library")
			set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_ARCHIVE "lib")
		endif ()
	endif ()
endmacro ()

macro (__determine_files_destination__ @CMAKEPROJGEN_PROJECTPREFIX@_TARGET_TYPE @CMAKEPROJGEN_PROJECTPREFIX@_TARGET_DESTINATION)
	if (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_TYPE} STREQUAL "Directory")
		set (@CMAKEPROJGEN_PROJECTPREFIX@_DIRECTORY_DESTINATION ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_DESTINATION})
	elseif (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_TYPE} STREQUAL "Files")
		set (@CMAKEPROJGEN_PROJECTPREFIX@_FILES_DESTINATION ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_DESTINATION})
	else ()
		set (@CMAKEPROJGEN_PROJECTPREFIX@_DIRECTORY_DESTINATION)
		set (@CMAKEPROJGEN_PROJECTPREFIX@_FILES_DESTINATION)
	endif ()
endmacro ()

macro (package @CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_NAME)
	cmake_parse_arguments (@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE
		""
		"VERSION;URL_HELP;EXPORT_NAME;EXPORT_SRCDIR;OUTDIR"
		""
		${ARGN})
		
	if (NOT @CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_IMPORTED)	
		project (${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_NAME})
		
		set_property (GLOBAL PROPERTY USE_FOLDERS ON)
		
		if (NOT @CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_OUTDIR)
			set (@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_OUTDIR ${CMAKE_BINARY_DIR}/output)
		endif ()

		set (@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_SRCDIR ${CMAKE_CURRENT_SOURCE_DIR})
			
		if (NOT @CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_EXPORT_SRCDIR)
			set (@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_EXPORT_SRCDIR ${CMAKE_SOURCE_DIR}/cmake)
		endif ()
		
		configure_cpack_generators ()
	endif ()
		
	if (NOT @CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_EXPORT_NAME)
		set (@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_EXPORT_NAME ${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_NAME})
	endif ()
	
	global (
		PACKAGE
			@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_NAME
			@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_VERSION
			@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_VERSION_MAJOR 
			@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_VERSION_MINOR 
			@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_VERSION_PATCH
			@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_OUTDIR
		INSTALLATION
			@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_TARGETS_TO_EXPORT
			@CMAKEPROJGEN_PROJECTPREFIX@_COMPONENTS_USED )
		
	string (REPLACE "." ";" __package_version__ ${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_VERSION})
	list (GET __package_version__ 0 @CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_VERSION_MAJOR)
	list (GET __package_version__ 1 @CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_VERSION_MINOR)
	list (GET __package_version__ 2 @CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_VERSION_PATCH)
	
endmacro ()

macro (endpackage)
	if (CPACK_GENERATOR AND @CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_TARGETS_TO_EXPORT)
		export (TARGETS ${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_TARGETS_TO_EXPORT}
			FILE ${PROJECT_BINARY_DIR}/${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_EXPORT_NAME}Targets.cmake)
		
		export (PACKAGE ${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_EXPORT_NAME})
		
		if (WIN32 AND NOT CYGWIN)
			set (INSTALL_CMAKE_DIR CMake)
		else ()
			set (INSTALL_CMAKE_DIR lib/CMake/${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_EXPORT_NAME})
		endif ()

		configure_file (${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_EXPORT_SRCDIR}/${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_EXPORT_NAME}ConfigVersion.cmake.in
			${PROJECT_BINARY_DIR}/${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_EXPORT_NAME}ConfigVersion.cmake @ONLY)
		configure_file (${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_EXPORT_SRCDIR}/${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_EXPORT_NAME}Config.cmake.in
			${PROJECT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_EXPORT_NAME}Config.cmake @ONLY)
		install (FILES
			${PROJECT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_EXPORT_NAME}Config.cmake
			${PROJECT_BINARY_DIR}/${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_EXPORT_NAME}ConfigVersion.cmake
			DESTINATION ${INSTALL_CMAKE_DIR} COMPONENT devtools)
		install (EXPORT ${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_EXPORT_NAME}Targets
			DESTINATION ${INSTALL_CMAKE_DIR} COMPONENT devtools)
			
		set (CPACK_COMPONENTS_ALL ${@CMAKEPROJGEN_PROJECTPREFIX@_COMPONENTS_USED})
		
		set (CPACK_PACKAGE_NAME ${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_EXPORT_NAME})
		set (CPACK_PACKAGE_VENDOR ${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_AUTHOR})
		set (CPACK_PACKAGE_VERSION ${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_VERSION})
		set (CPACK_PACKAGE_VERSION_MAJOR ${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_VERSION_MAJOR})
		set (CPACK_PACKAGE_VERSION_MINOR ${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_VERSION_MINOR})
		set (CPACK_PACKAGE_VERSION_PATCH ${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_VERSION_PATCH})
		
		if (WIN32 AND NOT UNIX)
			set (CPACK_PACKAGE_INSTALL_DIRECTORY "${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_EXPORT_NAME}\\\\${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_VERSION}")
		endif ()
		
		if (@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_INSTALLER_FILE_LICENSE)
			set (CPACK_RESOURCE_FILE_LICENSE ${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_INSTALLER_FILE_LICENSE})
			set (@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_INSTALLER_FILE_LICENSE)
		endif ()
		
		if (${CPACK_GENERATOR} STREQUAL NSIS)
			set (CPACK_NSIS_MODIFY_PATH ON)
			set (CPACK_NSIS_DISPLAY_NAME ${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_EXPORT_NAME})
			if (@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_CONTACT)
				set (CPACK_NSIS_CONTACT ${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_CONTACT})
				set (@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_CONTACT)
			endif ()
		endif ()

		foreach (C ${@CMAKEPROJGEN_PROJECTPREFIX@_COMPONENTS_USED})
			string (TOUPPER ${C} CUP)
			set (CPACK_COMPONENT_${CUP}_DISPLAY_NAME ${@CMAKEPROJGEN_PROJECTPREFIX@_COMPONENT_${C}_TITLE})
			set (CPACK_COMPONENT_${CUP}_DESCRIPTION  ${@CMAKEPROJGEN_PROJECTPREFIX@_COMPONENT_${C}_DESCRIPTION})
			set (CPACK_COMPONENT_${CUP}_DEPENDS      ${@CMAKEPROJGEN_PROJECTPREFIX@_COMPONENT_${C}_DEPENDS})
			
			if (@CMAKEPROJGEN_PROJECTPREFIX@_COMPONENT_${C}_GROUP)
				string (TOUPPER ${@CMAKEPROJGEN_PROJECTPREFIX@_COMPONENT_${C}_GROUP} CGR)
				set (CPACK_COMPONENT_${CUP}_GROUP ${@CMAKEPROJGEN_PROJECTPREFIX@_COMPONENT_${C}_GROUP})
				set (CPACK_COMPONENT_GROUP_${CGR}_DISPLAY_NAME
						${@CMAKEPROJGEN_PROJECTPREFIX@_COMPONENT_${@CMAKEPROJGEN_PROJECTPREFIX@_COMPONENT_${C}_GROUP}_TITLE})
				set (CPACK_COMPONENT_GROUP_${CGR}_DESCRIPTION
						${@CMAKEPROJGEN_PROJECTPREFIX@_COMPONENT_${@CMAKEPROJGEN_PROJECTPREFIX@_COMPONENT_${C}_GROUP}_DESCRIPTION})
			endif ()
		endforeach ()
		
		include (CPack)

		if (NOT ${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_SOURCE_DIR})
			foreach (var ${@CMAKEPROJGEN_PROJECTPREFIX@_GLOBAL_VARIABLES_PACKAGE})
				set (${var} ${${var}} PARENT_SCOPE)
			endforeach ()
		endif ()
	# else ()
		# message ("CPack PACKAGE target will not be created:")
		# message ("CPACK_GENERATOR: ${CPACK_GENERATOR}")
		# message ("@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_TARGETS_TO_EXPORT: ${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_TARGETS_TO_EXPORT}")
	endif ()
endmacro ()

macro (contacts)
	cmake_parse_arguments (@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE
		""
		"AUTHOR;CONTACT"
		""
		${ARGN})
endmacro ()

macro (copying)
	set (@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_LICENSES)
	set (@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_INSTALLER_FILE_LICENSE)
endmacro ()

macro (endcopying)
endmacro ()

macro (license __PACKAGE_LICENSE_NAME)
	cmake_parse_arguments (__PACKAGE_LICENSE
		"PUBLIC"
		"FILE"
		""
		${ARGN})
		
	list (APPEND @CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_LICENSES ${__PACKAGE_LICENSE_FILE})
	
	if (__PACKAGE_LICENSE_PUBLIC)
		set (@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_INSTALLER_FILE_LICENSE ${__PACKAGE_LICENSE_FILE})
		set (__PACKAGE_LICENSE_PUBLIC)
	endif ()
	set (__PACKAGE_LICENSE_FILE)
endmacro ()

macro (components)
	set (@CMAKEPROJGEN_PROJECTPREFIX@_COMPONENTS_HIERARCHY)
endmacro ()

macro (endcomponents)
	if (@CMAKEPROJGEN_PROJECTPREFIX@_COMPONENTS_HIERARCHY)
		
	endif ()
endmacro ()

macro (component __COMPONENT)
	cmake_parse_arguments (@CMAKEPROJGEN_PROJECTPREFIX@_COMPONENT_${__COMPONENT}
		"FEATURE"
		"TITLE;DESCRIPTION"
		"DEPENDS"
		${ARGN})
	
	if (NOT @CMAKEPROJGEN_PROJECTPREFIX@_COMPONENT_${__COMPONENT}_DESCRIPTION)
		set (@CMAKEPROJGEN_PROJECTPREFIX@_COMPONENT_${__COMPONENT}_DESCRIPTION ${@CMAKEPROJGEN_PROJECTPREFIX@_COMPONENT_${__COMPONENT}_TITLE})
	endif ()
	
	if (@CMAKEPROJGEN_PROJECTPREFIX@_COMPONENTS_HIERARCHY)
		list (GET @CMAKEPROJGEN_PROJECTPREFIX@_COMPONENTS_HIERARCHY 0 @CMAKEPROJGEN_PROJECTPREFIX@_COMPONENT_${__COMPONENT}_GROUP)
		set (@CMAKEPROJGEN_PROJECTPREFIX@_COMPONENT_GROUP_${@CMAKEPROJGEN_PROJECTPREFIX@_COMPONENT_${__COMPONENT}_GROUP} 1)
	endif ()
	
	if (NOT @CMAKEPROJGEN_PROJECTPREFIX@_COMPONENT_${__COMPONENT}_FEATURE)
		list (APPEND @CMAKEPROJGEN_PROJECTPREFIX@_COMPONENTS_HIERARCHY ${__COMPONENT})
	endif ()
endmacro ()

macro (endcomponent)
	list (REMOVE_AT @CMAKEPROJGEN_PROJECTPREFIX@_COMPONENTS_HIERARCHY 0)
endmacro ()

macro (installation @CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME)
	cmake_parse_arguments (__@CMAKEPROJGEN_PROJECTPREFIX@_INSTALLATION
		"EXPORT"
		"COMPONENT;TYPE;DEVELOPMENT;DESTINATION"
		""
		${ARGN})
	
	if (__@CMAKEPROJGEN_PROJECTPREFIX@_INSTALLATION_TYPE)
		set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_RUNTIME)
		set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_ARCHIVE)
		set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_LIBRARY)
		
		__determine_target_runtime__ (${__@CMAKEPROJGEN_PROJECTPREFIX@_INSTALLATION_TYPE})
		__determine_target_archive__ (${__@CMAKEPROJGEN_PROJECTPREFIX@_INSTALLATION_TYPE})
			
		if (__@CMAKEPROJGEN_PROJECTPREFIX@_INSTALLATION_DESTINATION)
			__determine_files_destination__ (${__@CMAKEPROJGEN_PROJECTPREFIX@_INSTALLATION_TYPE} ${__@CMAKEPROJGEN_PROJECTPREFIX@_INSTALLATION_DESTINATION})
		endif ()
	else ()
		message (FATAL_ERROR "Failed to determine command to install target ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME}: target type is unknown")
	endif ()
	
	if (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_RUNTIME OR @CMAKEPROJGEN_PROJECTPREFIX@_TARGET_ARCHIVE OR @CMAKEPROJGEN_PROJECTPREFIX@_TARGET_LIBRARY)
		if (NOT __@CMAKEPROJGEN_PROJECTPREFIX@_INSTALLATION_DEVELOPMENT)
			set (__@CMAKEPROJGEN_PROJECTPREFIX@_INSTALLATION_DEVELOPMENT ${__@CMAKEPROJGEN_PROJECTPREFIX@_INSTALLATION_COMPONENT})
		endif ()

		if (__@CMAKEPROJGEN_PROJECTPREFIX@_INSTALLATION_EXPORT)
			if (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_RUNTIME AND @CMAKEPROJGEN_PROJECTPREFIX@_TARGET_ARCHIVE)
				install (TARGETS ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME}
						 EXPORT ${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_EXPORT_NAME}Targets
						 RUNTIME DESTINATION ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_RUNTIME} COMPONENT ${__@CMAKEPROJGEN_PROJECTPREFIX@_INSTALLATION_COMPONENT}
						 ARCHIVE DESTINATION ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_ARCHIVE} COMPONENT ${__@CMAKEPROJGEN_PROJECTPREFIX@_INSTALLATION_DEVELOPMENT})
			elseif (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_RUNTIME)
				install (TARGETS ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME}
						 EXPORT ${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_EXPORT_NAME}Targets
						 RUNTIME DESTINATION ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_RUNTIME} COMPONENT ${__@CMAKEPROJGEN_PROJECTPREFIX@_INSTALLATION_COMPONENT})						 
			elseif (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_ARCHIVE)
				install (TARGETS ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME}
						 EXPORT ${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_EXPORT_NAME}Targets
						 ARCHIVE DESTINATION ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_ARCHIVE} COMPONENT ${__@CMAKEPROJGEN_PROJECTPREFIX@_INSTALLATION_DEVELOPMENT})
			elseif (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_LIBRARY)
				install (TARGETS ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME}
						 EXPORT ${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_EXPORT_NAME}Targets
						 LIBRARY DESTINATION ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_LIBRARY} COMPONENT ${__@CMAKEPROJGEN_PROJECTPREFIX@_INSTALLATION_COMPONENT})
			endif ()
		else ()
			if (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_RUNTIME AND @CMAKEPROJGEN_PROJECTPREFIX@_TARGET_ARCHIVE)			
				install (TARGETS ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME}
						 RUNTIME DESTINATION ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_RUNTIME} COMPONENT ${__@CMAKEPROJGEN_PROJECTPREFIX@_INSTALLATION_COMPONENT}
						 ARCHIVE DESTINATION ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_ARCHIVE} COMPONENT ${__@CMAKEPROJGEN_PROJECTPREFIX@_INSTALLATION_DEVELOPMENT})
			elseif (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_RUNTIME)
				install (TARGETS ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME}
						 RUNTIME DESTINATION ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_RUNTIME} COMPONENT ${__@CMAKEPROJGEN_PROJECTPREFIX@_INSTALLATION_COMPONENT})	
			elseif (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_LIBRARY)
				install (TARGETS ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME}
						 LIBRARY DESTINATION ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_LIBRARY} COMPONENT ${__@CMAKEPROJGEN_PROJECTPREFIX@_INSTALLATION_COMPONENT})						 
			elseif (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_ARCHIVE)
				install (TARGETS ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME}
						 ARCHIVE DESTINATION ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_ARCHIVE} COMPONENT ${__@CMAKEPROJGEN_PROJECTPREFIX@_INSTALLATION_DEVELOPMENT})			
			endif ()			
		endif ()
	elseif (@CMAKEPROJGEN_PROJECTPREFIX@_FILES_DESTINATION)
		install (FILES ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME}
				 DESTINATION ${__@CMAKEPROJGEN_PROJECTPREFIX@_INSTALLATION_DESTINATION}
				 COMPONENT ${__@CMAKEPROJGEN_PROJECTPREFIX@_INSTALLATION_COMPONENT})
				 
		set (@CMAKEPROJGEN_PROJECTPREFIX@_FILES_DESTINATION)
	elseif (@CMAKEPROJGEN_PROJECTPREFIX@_DIRECTORY_DESTINATION)
		install (DIRECTORY ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME}
				 DESTINATION ${__@CMAKEPROJGEN_PROJECTPREFIX@_INSTALLATION_DESTINATION}
				 COMPONENT ${__@CMAKEPROJGEN_PROJECTPREFIX@_INSTALLATION_COMPONENT})
				 
		set (@CMAKEPROJGEN_PROJECTPREFIX@_DIRECTORY_DESTINATION)
	else ()
		message (FATAL_ERROR "Failed to determine command to install target ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME}")		
	endif ()
	
	if (__@CMAKEPROJGEN_PROJECTPREFIX@_INSTALLATION_EXPORT)
		list (APPEND @CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_TARGETS_TO_EXPORT ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME})
		list (REMOVE_DUPLICATES @CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_TARGETS_TO_EXPORT)
		set (__@CMAKEPROJGEN_PROJECTPREFIX@_INSTALLATION_EXPORT)
	endif ()
	
	list (APPEND @CMAKEPROJGEN_PROJECTPREFIX@_COMPONENTS_USED ${__@CMAKEPROJGEN_PROJECTPREFIX@_INSTALLATION_COMPONENT} ${__@CMAKEPROJGEN_PROJECTPREFIX@_INSTALLATION_DEVELOPMENT})
	list (REMOVE_DUPLICATES @CMAKEPROJGEN_PROJECTPREFIX@_COMPONENTS_USED)
	
	if (NOT ${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_SOURCE_DIR})
		foreach (var ${@CMAKEPROJGEN_PROJECTPREFIX@_GLOBAL_VARIABLES_INSTALLATION})
			set (${var} ${${var}} PARENT_SCOPE)
		endforeach ()
	endif ()
endmacro ()

macro (target TARGET_NAME)
	cmake_parse_arguments (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET
		""
		"TYPE;COMPONENT;COMPILE_FLAGS;FOLDER;DEVELOPMENT;CATALOG;OUTPUTNAME"
		"DEPENDENCIES"
		${ARGN})

	set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME ${TARGET_NAME})
	set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_BINDIR ${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_OUTDIR})

	__determine_target_filename__ (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_TYPE})
	if (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_TYPE} STREQUAL "C++ Component")
		if (WIN32 AND NOT UNIX)
			set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_BINDIR "${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_BINDIR}/Components")
		else ()
			set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_BINDIR "${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_BINDIR}/services/${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_VERSION}")
		endif ()
	endif ()
endmacro ()

macro (endtarget)
	if (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_GROUPS)
		list (GET @CMAKEPROJGEN_PROJECTPREFIX@_TARGET_GROUPS 0 @CMAKEPROJGEN_PROJECTPREFIX@_GROUP_NAME)
	endif ()
	
	if (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES)
		if (@CMAKEPROJGEN_PROJECTPREFIX@_INLINED_GROUPS)
			foreach (ID_SUFFIX ${@CMAKEPROJGEN_PROJECTPREFIX@_INLINED_GROUPS})
				if (@CMAKEPROJGEN_PROJECTPREFIX@_INLINED_GROUP_${ID_SUFFIX})
					source_group (${@CMAKEPROJGEN_PROJECTPREFIX@_INLINED_GROUP_NAME_${ID_SUFFIX}} FILES ${@CMAKEPROJGEN_PROJECTPREFIX@_INLINED_GROUP_${ID_SUFFIX}})
				else ()
					message (FATAL_ERROR "Failed to inline source_group ${@CMAKEPROJGEN_PROJECTPREFIX@_INLINED_GROUP_NAME_${ID_SUFFIX}}")
				endif ()
			endforeach ()
		endif ()
		
		if (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_TYPE} STREQUAL "Executable")
			add_executable (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME} ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES})
		elseif (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_TYPE} STREQUAL "Shared Library")
			add_library (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME} SHARED ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES})
		elseif (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_TYPE} STREQUAL "Static Library")
			add_library (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME} STATIC ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES})
		elseif (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_TYPE} STREQUAL "C++ Component")
			add_library (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME} SHARED ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES})
		elseif (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_TYPE} STREQUAL "Java Archive")
			# TODO: branches/java
			message (WARNING "Target '${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME} has been ignored because '${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_TYPE}' is not supported yet.")
			set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_DEPENDENCIES)
		else ()
			message (FATAL_ERROR "Unknown type '${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_TYPE}' specified for target '${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME}'")
		endif ()
		
		set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES)
		
		if (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_OUTPUTNAME)
			set_target_properties (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME} PROPERTIES OUTPUT_NAME ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_OUTPUTNAME})
			set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_OUTPUTNAME)

			if (${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
				get_target_property (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_LINKFLAGS ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME} LINK_FLAGS)
				if (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_LINKFLAGS)
					set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_LINKFLAGS "${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_LINKFLAGS} /IMPLIB:'${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_OUTDIR}/${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME}.lib'")
				else ()
					set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_LINKFLAGS "/IMPLIB:'${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_OUTDIR}/${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME}.lib'")
				endif ()
				set_target_properties (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME} PROPERTIES LINK_FLAGS ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_LINKFLAGS})
				message ("override link flags: ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_LINKFLAGS}")
				set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_LINKFLAGS)
			endif ()
		endif ()
		
		if (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_DEPENDENCIES)
			target_link_libraries (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME} ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_DEPENDENCIES})
			set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_DEPENDENCIES)
		endif ()
		
		if (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_COMPILE_FLAGS)
			set_target_properties (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME} PROPERTIES COMPILE_FLAGS ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_COMPILE_FLAGS})
			set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_COMPILE_FLAGS)
		endif ()
		
		if (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_COMPONENT)
			# if (@CMAKEPROJGEN_PROJECTPREFIX@_COMPONENT_${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_COMPONENT}_GROUP)
				# set (__COMPONENT_GROUP_TITLE @CMAKEPROJGEN_PROJECTPREFIX@_COMPONENT_${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_COMPONENT}_TITLE)
				# message (FATAL_ERROR "You cannot assign target '${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME}' to component group '${@CMAKEPROJGEN_PROJECTPREFIX@_COMPONENT_${@CMAKEPROJGEN_PROJECTPREFIX@_COMPONENT_${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_COMPONENT}_GROUP}_TITLE}'")
				# set (__COMPONENT_GROUP_TITLE)
			# else
			if (@CMAKEPROJGEN_PROJECTPREFIX@_COMPONENT_${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_COMPONENT}_TITLE)
				if (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_DEVELOPMENT)
					installation (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME}	EXPORT
						TYPE ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_TYPE}
						COMPONENT ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_COMPONENT}
						DEVELOPMENT ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_DEVELOPMENT})
				else ()
					installation (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME}	EXPORT
						TYPE ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_TYPE}
						COMPONENT ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_COMPONENT})				
				endif ()
				
				if (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_CATALOG)
					get_filename_component (COMPONENTFILENAME ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_CATALOG} NAME)
					
					if (WIN32 AND NOT UNIX)
						set (COMPONENT_URL "vnd.sun.star.expand:\${ORIGIN}/Components/${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILENAME}")
						configure_file (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_CATALOG}.in ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_BINDIR}/Catalog/${COMPONENTFILENAME})
						installation (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_BINDIR}/Catalog/${COMPONENTFILENAME}
							TYPE "Files"
							DESTINATION "${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_RUNTIME}/Catalog"
							COMPONENT ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_COMPONENT})
					else ()
                        set (COMPONENT_URL "vnd.sun.star.expand:\${ORIGIN}/unicom-${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_VERSION_MAJOR}/services/${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILENAME}")
						configure_file (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_CATALOG}.in ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_BINDIR}/catalog/${COMPONENTFILENAME})
						installation (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_BINDIR}/catalog/${COMPONENTFILENAME}
							TYPE "Files"
                            DESTINATION share/unicom-${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_VERSION_MAJOR}/services
							COMPONENT ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_COMPONENT})					
					endif ()
				endif ()

				set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_COMPONENT)
				set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_DEVELOPMENT)
			else ()
				message (FATAL_ERROR "You did assigned target '${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME}' to unknown component '${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_COMPONENT}'")
			endif ()		
		endif ()
		
		if (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FOLDER)
			set_property (TARGET ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME} PROPERTY FOLDER ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FOLDER})
			set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FOLDER)
		endif ()
		
		set (TARGET_TYPES "RUNTIME;LIBRARY;ARCHIVE")
		foreach (TARGET_TYPE ${TARGET_TYPES})
			set_target_properties (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME} 
				PROPERTIES ${TARGET_TYPE}_OUTPUT_DIRECTORY ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_BINDIR})
			foreach (CONFIG_TYPE ${CMAKE_CONFIGURATION_TYPES})
				string (TOUPPER ${CONFIG_TYPE} CONFIG_TYPE)
				set_target_properties (${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME} 
					PROPERTIES ${TARGET_TYPE}_OUTPUT_DIRECTORY_${CONFIG_TYPE} ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_BINDIR})
			endforeach ()
		endforeach ()
		
		set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_OUTPUT_PATH ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_BINDIR}/${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILENAME})
		
		if (NOT ${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_SOURCE_DIR})
			foreach (var ${@CMAKEPROJGEN_PROJECTPREFIX@_GLOBAL_VARIABLES_TARGET})
				set (${var} ${${var}} PARENT_SCOPE)
			endforeach ()
		endif ()
	else ()
		message (WARNING "'${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_NAME}' has no source files. Target is ignored!")
	endif ()
endmacro ()

macro (additional_dependencies)
	cmake_parse_arguments (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_ADDITIONAL_DEPENDENCIES
		""
		"PLATFORM;SYSTEM"
		""
		${ARGN})
		
	if (NOT @CMAKEPROJGEN_PROJECTPREFIX@_TARGET_ADDITIONAL_DEPENDENCIES_PLATFORM AND NOT @CMAKEPROJGEN_PROJECTPREFIX@_TARGET_ADDITIONAL_DEPENDENCIES_SYSTEM)
		set (APPEND_DEPENDENCIES_TO_TARGET 1)
	elseif (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_ADDITIONAL_DEPENDENCIES_PLATFORM AND ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_ADDITIONAL_DEPENDENCIES_PLATFORM})
		set (APPEND_DEPENDENCIES_TO_TARGET 1)
	elseif (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_ADDITIONAL_DEPENDENCIES_SYSTEM)
		if (${CMAKE_SYSTEM_NAME} STREQUAL ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_ADDITIONAL_DEPENDENCIES_SYSTEM})
			set (APPEND_DEPENDENCIES_TO_TARGET 1)
		endif ()
	endif ()
	
	if (APPEND_DEPENDENCIES_TO_TARGET)
		list (APPEND @CMAKEPROJGEN_PROJECTPREFIX@_TARGET_DEPENDENCIES ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_ADDITIONAL_DEPENDENCIES_UNPARSED_ARGUMENTS})
		set (APPEND_DEPENDENCIES_TO_TARGET)
	endif ()
endmacro ()

macro (compileflags)
	cmake_parse_arguments (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_ADDITIONAL_COMPILEFLAGS
		""
		"PLATFORM;SYSTEM"
		""
		${ARGN})
		
	if (NOT @CMAKEPROJGEN_PROJECTPREFIX@_TARGET_ADDITIONAL_COMPILEFLAGS_PLATFORM AND NOT @CMAKEPROJGEN_PROJECTPREFIX@_TARGET_ADDITIONAL_COMPILEFLAGS_SYSTEM)
		set (APPEND_COMPILEFLAGS_TO_TARGET 1)
	elseif (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_ADDITIONAL_COMPILEFLAGS_PLATFORM AND ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_ADDITIONAL_COMPILEFLAGS_PLATFORM})
		set (APPEND_COMPILEFLAGS_TO_TARGET 1)
	elseif (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_ADDITIONAL_COMPILEFLAGS_SYSTEM)
		if (${CMAKE_SYSTEM_NAME} STREQUAL ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_ADDITIONAL_COMPILEFLAGS_SYSTEM})
			set (APPEND_COMPILEFLAGS_TO_TARGET 1)
		endif ()
	endif ()
	
	if (APPEND_COMPILEFLAGS_TO_TARGET)
		list (APPEND @CMAKEPROJGEN_PROJECTPREFIX@_TARGET_COMPILE_FLAGS ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_ADDITIONAL_COMPILEFLAGS_UNPARSED_ARGUMENTS})
		set (APPEND_COMPILEFLAGS_TO_TARGET)
	endif ()
endmacro ()

macro (group @CMAKEPROJGEN_PROJECTPREFIX@_TARGET_GROUP_NAME)
	__apply_target_group_files ()
	list (INSERT @CMAKEPROJGEN_PROJECTPREFIX@_TARGET_GROUPS 0 ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_GROUP_NAME})
	set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_GROUP_FILES)
endmacro ()

macro (endgroup)
	__apply_target_group_files ()
	list (REMOVE_AT @CMAKEPROJGEN_PROJECTPREFIX@_TARGET_GROUPS 0)
endmacro ()

macro (files)
	cmake_parse_arguments (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES
		"RECURSE"
		"DIRECTORY;SYSTEM;PLATFORM"
		"PATTERN"
		${ARGN})
	
	if (NOT @CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES_SYSTEM AND NOT @CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES_PLATFORM)
		set (APPEND_FILES_TO_TARGET 1)
	elseif (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES_SYSTEM)
		if (${CMAKE_SYSTEM_NAME} STREQUAL ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES_SYSTEM})
			set (APPEND_FILES_TO_TARGET 1)
		endif ()
	elseif (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES_PLATFORM AND ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES_PLATFORM})
		set (APPEND_FILES_TO_TARGET 1)
	endif ()
	
	if (APPEND_FILES_TO_TARGET)
		if (@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_SRCDIR)
			set (TARGET_FILES_DIRECTORY ${@CMAKEPROJGEN_PROJECTPREFIX@_PACKAGE_SRCDIR}/${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES_DIRECTORY})
		else ()
			set (TARGET_FILES_DIRECTORY ${CMAKE_SOURCE_DIR}/${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES_DIRECTORY})
		endif ()
		
		if (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES_PATTERN)
			if (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES_RECURSE)
				file (GLOB_RECURSE TARGET_FILES RELATIVE ${TARGET_FILES_DIRECTORY} ${TARGET_FILES_DIRECTORY}/*)
							
				set (TARGET_FILES_DIRECTORIES)
				foreach (TARGET_FILE ${TARGET_FILES})
					if (IS_DIRECTORY (${TARGET_FILES_DIRECTORY}/${TARGET_FILE}))
						list (APPEND TARGET_FILES_DIRECTORIES ${TARGET_FILE})
					else ()
						get_filename_component (TARGET_DIRECTORY ${TARGET_FILE} DIRECTORY)
						if (TARGET_DIRECTORY)
							list (APPEND TARGET_FILES_DIRECTORIES ${TARGET_DIRECTORY})
						endif ()
					endif ()
				endforeach ()
				
				if (TARGET_FILES_DIRECTORIES)
					list (REMOVE_DUPLICATES TARGET_FILES_DIRECTORIES)
					list (SORT TARGET_FILES_DIRECTORIES)
									
					foreach (TARGET_DIRECTORY ${TARGET_FILES_DIRECTORIES})					
						string (REPLACE "/" "\\\\" TARGET_GROUP_NAME ${TARGET_DIRECTORY})
						group (${TARGET_GROUP_NAME})
							foreach (TARGET_PATTERN ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES_PATTERN})								
								file (GLOB TARGET_FILES RELATIVE ${TARGET_FILES_DIRECTORY} ${TARGET_FILES_DIRECTORY}/${TARGET_DIRECTORY}/${TARGET_PATTERN})
								
								if (TARGET_FILES)
									list (APPEND TARGET_FILES_TOTAL ${TARGET_FILES})
								endif ()
							endforeach ()
							
							if (TARGET_FILES_TOTAL)
								if (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES_DIRECTORY)
									set (__@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES__)
									foreach (TARGET_FILE ${TARGET_FILES_TOTAL})
										list (APPEND __@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES__ ${TARGET_FILES_DIRECTORY}/${TARGET_FILE})
									endforeach ()
									
									set (TARGET_FILES_TOTAL ${__@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES__})
								endif ()
								
								if (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_GROUPS)
									list (APPEND @CMAKEPROJGEN_PROJECTPREFIX@_TARGET_GROUP_FILES ${TARGET_FILES_TOTAL})
								else ()
									list (APPEND @CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES ${TARGET_FILES_TOTAL})
								endif ()
								set (TARGET_FILES_TOTAL)
							endif ()
						endgroup ()	
					endforeach ()
				endif ()
			endif ()
			
			foreach (TARGET_PATTERN ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES_PATTERN})
				file (GLOB TARGET_FILES RELATIVE ${TARGET_FILES_DIRECTORY} ${TARGET_FILES_DIRECTORY}/${TARGET_PATTERN})
				
				if (TARGET_FILES)
					list (APPEND TARGET_FILES_TOTAL ${TARGET_FILES})
				endif ()
			endforeach ()
			
			if (TARGET_FILES_TOTAL)
				if (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES_DIRECTORY)
					set (__@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES__)
					foreach (TARGET_FILE ${TARGET_FILES_TOTAL})
						list (APPEND __@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES__ ${TARGET_FILES_DIRECTORY}/${TARGET_FILE})
					endforeach ()
					
					set (TARGET_FILES_TOTAL ${__@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES__})
				endif ()
				
				if (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_GROUPS)
					list (APPEND @CMAKEPROJGEN_PROJECTPREFIX@_TARGET_GROUP_FILES ${TARGET_FILES_TOTAL})
				else ()
					list (APPEND @CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES ${TARGET_FILES_TOTAL})
				endif ()
				set (TARGET_FILES_TOTAL)
			endif ()
		elseif (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES_DIRECTORY)
			set (__@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES__)
			foreach (TARGET_FILE ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES_UNPARSED_ARGUMENTS})
				list (APPEND __@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES__ ${TARGET_FILES_DIRECTORY}/${TARGET_FILE})
			endforeach ()
			set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES_DIRECTORY)
			files (${__@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES__})
		elseif (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_GROUPS)
			list (APPEND @CMAKEPROJGEN_PROJECTPREFIX@_TARGET_GROUP_FILES ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES_UNPARSED_ARGUMENTS})
		else ()
			list (APPEND @CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES_UNPARSED_ARGUMENTS})
		endif ()
		
		set (APPEND_FILES_TO_TARGET)
	endif ()
endmacro ()

macro (__apply_target_group_files)
	if (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_GROUP_FILES)
		set (__TARGET_GROUP_NAME)
		foreach (__TARGET_GROUP ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_GROUPS})
			if (__TARGET_GROUP_NAME)
				set (__TARGET_GROUP_NAME ${__TARGET_GROUP}\\${__TARGET_GROUP_NAME})
			else ()
				set (__TARGET_GROUP_NAME ${__TARGET_GROUP})
			endif ()
		endforeach ()
		
		if (__TARGET_GROUP_NAME)
			if (@CMAKEPROJGEN_PROJECTPREFIX@_INLINE_SCOPES)
				string (MAKE_C_IDENTIFIER ${__TARGET_GROUP_NAME} __TARGET_GROUP_C_NAME)
				set (@CMAKEPROJGEN_PROJECTPREFIX@_INLINED_GROUP_${__TARGET_GROUP_C_NAME} ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_GROUP_FILES})
				set (@CMAKEPROJGEN_PROJECTPREFIX@_INLINED_GROUP_NAME_${__TARGET_GROUP_C_NAME} ${__TARGET_GROUP_NAME})
				list (INSERT @CMAKEPROJGEN_PROJECTPREFIX@_INLINED_GROUPS 0 ${__TARGET_GROUP_C_NAME})
			else ()
				source_group (${__TARGET_GROUP_NAME} FILES ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_GROUP_FILES})
			endif ()
			
			list (APPEND @CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_GROUP_FILES})
		endif ()
		
		set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_GROUP_FILES)
	endif ()
endmacro ()

macro (inline name)
	cmake_parse_arguments (__@CMAKEPROJGEN_PROJECTPREFIX@_INLINE
		""
		"SCOPE"
		""
		${ARGN})

	if (NOT __@CMAKEPROJGEN_PROJECTPREFIX@_INLINE_SCOPE)
		set (__@CMAKEPROJGEN_PROJECTPREFIX@_INLINE_SCOPE "target")
	endif ()
	
	list (INSERT @CMAKEPROJGEN_PROJECTPREFIX@_INLINE_SCOPES 0 ${__@CMAKEPROJGEN_PROJECTPREFIX@_INLINE_SCOPE})
	set (__@CMAKEPROJGEN_PROJECTPREFIX@_INLINE_SCOPE)
endmacro ()

macro (endinline)
	list (GET @CMAKEPROJGEN_PROJECTPREFIX@_INLINE_SCOPES 0 __@CMAKEPROJGEN_PROJECTPREFIX@_INLINE_SCOPE)
	list (REMOVE_AT @CMAKEPROJGEN_PROJECTPREFIX@_INLINE_SCOPES 0)
	
	if (${__@CMAKEPROJGEN_PROJECTPREFIX@_INLINE_SCOPE} STREQUAL "target")
		set (@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES ${@CMAKEPROJGEN_PROJECTPREFIX@_TARGET_FILES} PARENT_SCOPE)
		set (@CMAKEPROJGEN_PROJECTPREFIX@_INLINED_GROUPS ${@CMAKEPROJGEN_PROJECTPREFIX@_INLINED_GROUPS} PARENT_SCOPE)
		foreach (ID_SUFFIX ${@CMAKEPROJGEN_PROJECTPREFIX@_INLINED_GROUPS})
			set (@CMAKEPROJGEN_PROJECTPREFIX@_INLINED_GROUP_${ID_SUFFIX} ${@CMAKEPROJGEN_PROJECTPREFIX@_INLINED_GROUP_${ID_SUFFIX}} PARENT_SCOPE)
			set (@CMAKEPROJGEN_PROJECTPREFIX@_INLINED_GROUP_NAME_${ID_SUFFIX} ${@CMAKEPROJGEN_PROJECTPREFIX@_INLINED_GROUP_NAME_${ID_SUFFIX}} PARENT_SCOPE)
		endforeach ()
	endif ()
endmacro ()